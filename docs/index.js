const s=Math.sin,r=Math.random;class FixedQueue{constructor(t){this.size=t,this.storage=[]}add(t){this.storage.length>this.size&&(this.storage.shift(),console.log("shifting")),console.log(`Added ${t}`),this.storage.push(t)}}class Orb{constructor(t,s,i){this.g=t,this.x=s,this.y=i,this._radius=300*r(),this.radius=this._radius,this._red=125+120*r(),this._green=46+20*r(),this._blue=206+30*r(),this.red=this._red,this.green=this._green,this.blue=this._blue,this.rate=25+50*r()}_draw(t,s,i,e){let r=color(t,s,i,2.5);this.g.stroke(r),this.g.noFill(),this.g.strokeWeight(5),this.g.ellipse(this.x,this.y,e,e)}draw(){this._draw(this.red,this.green,this.blue,this.radius)}increment(t){this.red=this._red*s(t/this.rate),this.green=this._green*s(t/this.rate),this.blue=this._blue*s(t/this.rate),this.radius=map(s(t/20),-1,1,50,this._radius+60)}}let orbs=[];var bg;const num=6;var prevPos;let g,fontSize,bounds,points,myFont,inkArray=[],maxSize=[];var string="monopole";function preload(){myFont=loadFont("fonts/JetBrainsMono-Regular.ttf"),bg=loadImage("pixels/david_small.png")}function setup(){createCanvas(displayWidth,displayHeight),g=createGraphics(displayWidth,displayHeight),background(52,235,64);for(var t=0;t<150;t++)orbs.push(new Orb(g,r()*displayWidth,r()*displayHeight));fontSize=displayWidth/10.625,bust=createGraphics(343,639),bounds=myFont.textBounds(string,0,0,fontSize),console.log(bounds),console.log(myFont),points=myFont.textToPoints(string,0,0,fontSize,{sampleFactor:.2,simplifyThreshold:0}),console.log(`text ratio: ${displayWidth/fontSize}`)}function draw(){clear(),background(52,235,64),tint(255,75),image(bg,300,100),noTint(),orbs.map(t=>{t.draw(),t.increment(frameCount)}),image(g,0,0),translate((width-bounds.w)/2,(height-bounds.h)/2+bounds.h);var t=map(s(frameCount/50),-1,1,0,200),i=map(cos(frameCount/50),-1,1,0,.006);noFill();let e=color(map(s(frameCount/40),-1,1,50,105),map(s(frameCount/60),-1,1,0,105),map(s(frameCount/40),-1,1,0,155),100);stroke(e),strokeWeight(16),beginShape(POINTS),points.map(s=>{var e=noise((frameCount+s.x)*i,s.y*i),r=noise(s.x*i,(frameCount+s.y)*i),o=s.x+map(e,0,1,-1,1)*t,a=s.y+map(r,0,1,-1,1)*t;vertex(o,a)}),endShape(CLOSE)}